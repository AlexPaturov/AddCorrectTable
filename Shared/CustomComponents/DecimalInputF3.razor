@inherits InputBase<decimal>

<input @attributes="AdditionalAttributes"
       type="text"
       class="@CssClass"
       value="@CurrentValueAsString"
       @onchange="e => CurrentValueAsString = e.Value.ToString()" />

@code {
    /// <summary>
    /// Blazor вызывает этот метод, чтобы преобразовать введенную пользователем строку в decimal.
    /// </summary>
    protected override bool TryParseValueFromString(string? value, out decimal result, out string validationErrorMessage)
    {
        // Заменяем запятую на точку для универсальности
        var normalizedValue = value?.Replace(',', '.');

        if (decimal.TryParse(normalizedValue, NumberStyles.Any, CultureInfo.InvariantCulture, out var parsedValue))
        {
            // Успешно спарсили, округляем до 3 знаков
            result = Math.Round(parsedValue, 3);
            validationErrorMessage = null; // Ошибки нет
            return true;
        }
        else
        {
            result = default; // Возвращаем 0, так как тип не nullable
            validationErrorMessage = "Неверный формат числа.";
            return false;
        }
    }

    /// <summary>
    /// Blazor вызывает этот метод, чтобы отформатировать значение decimal обратно в строку.
    /// </summary>
    protected override string? FormatValueAsString(decimal value)
    {
        return value.ToString("F3", CultureInfo.InvariantCulture);
    }
}