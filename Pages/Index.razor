@page "/"
@implements IDisposable 
@inject MaterialService MaterialService
@inject IJSRuntime JSRuntime 

<h3>Материалы за @SelectedDate.ToShortDateString()</h3>

<div class="row mb-2">
    <div class="col-3">
        <InputDate @bind-Value="SelectedDate" />
        <button @onclick="LoadData">Загрузить</button>
    </div>
</div>

@if (Materials.Any())
{
    <div class="row">

        @*--------- changable table begin --------------*@
        <div class="col-4">

            <EditForm Model="Materials" OnValidSubmit="Save">
                <DataAnnotationsValidator />

                <div class="mb-2">
                    <table class="table-custom">
                        <thead>
                            <tr>
                                <th>Наименование материала</th>
                                <th>Масса</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < Materials.Count; i++)
                            {
                                var mat = Materials[i];
                                <tr @key="mat.Kodn">
                                    <td class="cell-separator">@mat.Name</td>
                                    <td >
                                        <DecimalInputF3 @bind-Value="mat.MassSum"
                                                        class="@(mat.InputCssClass + " editable-input")"
                                                        id="@($"mass-input-{i}")" />
                                        @* <ValidationMessage For="@(() => mat.MassSum)" /> *@
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="col-auto">
                    <button type="submit" class="btn btn-primary">Сохранить</button>
                </div>

            </EditForm>
        </div>
        @*--------- changable table end --------------*@
        <div class="col-1">
            <span></span>
        </div>
        @*--------- show table begin --------------*@
        <div class="col-4">
            <h4>Откорректированные данные</h4>

            <div class="mb-2 d-flex align-items-center">
                @* Используем flex для выравнивания в линию *@

                @* === НОВЫЙ ЧЕКБОКС === *@
                <div class="form-check">
                    <InputCheckbox id="showCorrected" @bind-Value="showCorrectedTable" class="form-check-input" />
                    <label for="showCorrected" class="form-check-label">Показать таблицу</label>
                </div>

                <div class="col-auto mt-2">
                    <button class="btn btn-info me-3" @onclick="LoadCorrectedData">Обновить данные</button>
                    <button class="btn btn-info btn-sm" @onclick="LoadCorrectedData">Показать сохраненные данные</button>
                </div>

            </div>

            @if (showCorrectedTable && CorrectedMaterials.Any())
            {
                <table class="table-custom">
                    <thead>
                        <tr>
                            <th>Наименование</th>
                            <th>Скорр. масса</th>
                            <th>Пользователь</th>
                            <th>Время правки</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var corrected in CorrectedMaterials)
                        {
                            <tr>
                                <td>@corrected.Name</td>
                                <td class="text-right">@corrected.MassCorrected?.ToString("F3")</td>
                                <td>@corrected.Username</td>
                                <td>@corrected.CorrectedAt?.ToString("g")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
           

           
        </div>
        @*--------- show table end ----------------*@

    </div> 
}

@code {
    private List<AggregatedMaterial> Materials = new();
    private List<MaterialAggregatedCorrected> CorrectedMaterials = new();
    private DateTime SelectedDate = DateTime.Today;
    private DotNetObjectReference<Index> dotNetHelper; // Ссылка на наш компонент
    private bool showCorrectedTable = false; // По умолчанию таблица будет скрыта

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);  // Создаем ссылку на этот компонент, чтобы передать ее в JS
            await JSRuntime.InvokeVoidAsync("initializeTableNavigation", dotNetHelper); // Инициализируем наш JS-обработчик
        }
    }

    private async Task LoadData()
    {
        Materials = await MaterialService.GetAggregatedMaterialsAsync(SelectedDate);
        CorrectedMaterials.Clear(); // Очищаем вторую таблицу при загрузке новых данных для правки
        
        await LoadCorrectedData(); // После успешного сохранения СРАЗУ ЖЕ обновляем вторую таблицу
    }

    // Новый метод для загрузки данных во вторую таблицу
    private async Task LoadCorrectedData()
    {
        CorrectedMaterials = await MaterialService.GetCorrectedMaterialsAsync(SelectedDate);
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task Save()
    {
        // Отправляем на сохранение только измененные объекты
        var materialsToSave = Materials.Where(m => m.IsModified).ToList();

        if (materialsToSave.Any())
        {
            foreach (var mat in materialsToSave)
            {
                mat.Date = SelectedDate;
            }

            var count = await MaterialService.SaveCorrectedMaterialsAsync(materialsToSave);
            Console.WriteLine($"Сохранено: {count} записей");

            // После успешного сохранения сбрасываем флаги у сохраненных объектов
            foreach (var mat in materialsToSave)
            {
                mat.ResetModifiedState();
            }
            await InvokeAsync(() => StateHasChanged());
        }
    }
   
    // Этот метод будет вызываться из JavaScript
    [JSInvokable]
    public string? GetNextFocusElementId(string currentId, string key)
    {
        // "mass-input-5" -> 5
        var currentIndex = int.Parse(currentId.Split('-').Last());

        var nextIndex = -1;
        if (key == "ArrowDown" && currentIndex < Materials.Count - 1)
        {
            nextIndex = currentIndex + 1;
        }
        else if (key == "ArrowUp" && currentIndex > 0)
        {
            nextIndex = currentIndex - 1;
        }

        return nextIndex != -1 ? $"mass-input-{nextIndex}" : null;
    }

    public void Dispose()
    {
        dotNetHelper?.Dispose(); // Обязательно освобождаем ссылку при уничтожении компонента
    }
}
